# .github/workflows/cron.yml
name: YouTube ‚Üí Supabase pipeline

# ========= CONFIGURACI√ìN GLOBAL DEL WORKFLOW =========
concurrency:
  group: youtube-supabase-${{ github.ref }}-${{ github.event.schedule || 'manual' }}
  cancel-in-progress: true

env:
  TZ: America/Lima # Anclar a la zona horaria de Lima para los slots diarios
  THUMB_OBJECTS_ENABLED: ${{ vars.THUMB_OBJECTS_ENABLED || 'false' }}
  THUMB_OCR_ENABLED: ${{ vars.THUMB_OCR_ENABLED || 'false' }}
  NICHES_EMBEDDING_ENABLED: ${{ vars.NICHES_EMBEDDING_ENABLED || 'false' }}

# ========= DISPARADORES (TRIGGERS) DEL WORKFLOW =========
on:
  workflow_dispatch:
    inputs:
      only:
        description: "Ejecutar solo este job (aplica en router)"
        required: false
        type: choice
        options:
          - ""
          - import_daily
          - import_captions
          - import_recent_comments
          - detect_thumbnail_objects
          - extract_thumbnail_text
          - convert_captions_to_script
          - reconcile_comments
          - fetch_comment_sentiment
          - build_channel_profile
          - build_niche_profile
          - scan_competencia_auto_nicho
          - fetch_trending_videos
          - refine_trending_with_niche
          - fetch_video_analytics
          - fetch_monetization_metrics
          - fetch_search_trends
          - maint_metrics
          - purge_buffer
          - export_sync_watermarks
          - compute_posting_schedule
      force:
        description: "Ignorar checkpoint (router)"
        required: false
        default: "false"
        type: choice
        options: ["false","true"]
      persist_checkpoint:
        description: "Guardar checkpoint al terminar (router)"
        required: false
        default: "true"
        type: choice
        options: ["true","false"]
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - '.github/workflows/cron.yml'
      - 'requirements.txt'
      - '*.py'
  schedule:
    # Secuencia diaria de jobs (horas en UTC, equivalentes a Lima UTC-5)
    - cron: "0 5 * * *"    # 1. import_daily (00:00 Lima)
    - cron: "10 5 * * *"   # 2. import_captions (00:10 Lima)
    - cron: "20 5 * * *"   # 3. import_recent_comments (00:20 Lima)
    - cron: "30 5 * * *"   # 4. detect_thumbnail_objects (00:30 Lima)
    - cron: "40 5 * * *"   # 5. extract_thumbnail_text (00:40 Lima)
    - cron: "50 5 * * *"   # 6. convert_captions_to_script (00:50 Lima)
    - cron: "0 6 * * *"    # 7. reconcile_comments (01:00 Lima)
    - cron: "10 6 * * *"   # 8. fetch_comment_sentiment (01:10 Lima)
    - cron: "20 6 * * *"   # 9. build_niche_profile (01:20 Lima)
    - cron: "30 6 * * *"   # 10. scan_competencia_auto_nicho (01:30 Lima)
    - cron: "40 6 * * *"   # 11. maint_metrics (01:40 Lima)
    - cron: "50 6 * * *"   # 12. fetch_video_analytics (01:50 Lima)
    - cron: "0 7 * * *"    # 13. compute_posting_schedule (02:00 Lima)
    - cron: "10 7 * * *"   # 14. fetch_monetization_metrics (02:10 Lima)
    - cron: "20 7 * * *"   # 15. fetch_trending_videos (02:20 Lima)
    - cron: "30 7 * * *"   # 16. fetch_search_trends (02:30 Lima)
    - cron: "40 7 * * *"   # 17. purge_buffer (02:40 Lima)
    - cron: "50 7 * * *"   # 18. export_sync_watermarks (02:50 Lima)

jobs:
  # =====================================================================================
  # MODO ROUTER (PRODUCCI√ìN) - SECUENCIA POR SLOTS DE TIEMPO
  # =====================================================================================

  # =====================================================================================
  # PASO 1: IMPORTACI√ìN DE DATOS INICIAL
  # =====================================================================================
  import_daily:
    name: "PASO 1: Importar Videos Diarios (00:00 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'import_daily')) ||
      (github.event_name == 'schedule' && github.event.schedule == '0 5 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias del sistema (OCR/OpenCV)
        if: ${{ vars.THUMB_OCR_ENABLED == 'true' || vars.THUMB_OBJECTS_ENABLED == 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr libgl1
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-d)" >> $GITHUB_OUTPUT
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/import_daily
          key: import-daily-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "import_daily ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        uses: nick-invision/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: |
            set -euo pipefail
            export SUPABASE_URL="$(printf '%s' "$SUPABASE_URL_RAW" | tr -d '\r\n ' | sed 's:/*$::')"
            export SUPABASE_SERVICE_KEY="$(printf '%s' "$SUPABASE_SERVICE_KEY_RAW" | tr -d '\r\n ')"
            python ${{ steps.pydir.outputs.PYDIR }}/import_daily.py
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          SUPABASE_URL_RAW: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_RAW: ${{ secrets.SUPABASE_SERVICE_KEY }}
          DAILY_VIDEO_BATCH: ${{ secrets.DAILY_VIDEO_BATCH }}
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          ENABLE_THUMBNAIL_OCR: "true"
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/import_daily
          key: import-daily-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Notificar fallo por email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          secure: true
          subject: 'YT‚ÜíSupabase: Workflow FAILED üò±'
          from: jvillarreal0991@gmail.com
          to: ${{ secrets.ALERT_EMAIL }}
          body: |
            Ha fallado el job ${{ github.job }} en el run ${{ github.run_id }}.
            Revisa los logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # =====================================================================================
  # PASO 2: IMPORTAR SUBT√çTULOS
  # =====================================================================================
  import_captions:
    name: "PASO 2: Importar Subt√≠tulos (00:10 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'import_captions')) ||
      (github.event_name == 'schedule' && github.event.schedule == '10 5 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que import_daily termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: import-daily-${{ steps.slot.outputs.SLOT }}-0 5 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de import_daily para ${{ steps.slot.outputs.SLOT }}. Se omite import_captions para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/import_captions
          key: import-captions-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "import_captions ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        uses: nick-invision/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: |
            set -euo pipefail
            export SUPABASE_URL="$(printf '%s' "$SUPABASE_URL_RAW" | tr -d '\r\n ' | sed 's:/*$::')"
            export SUPABASE_SERVICE_KEY="$(printf '%s' "$SUPABASE_SERVICE_KEY_RAW" | tr -d '\r\n ')"
            python ${{ steps.pydir.outputs.PYDIR }}/import_captions.py
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          SUPABASE_URL_RAW: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_RAW: ${{ secrets.SUPABASE_SERVICE_KEY }}
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/import_captions
          key: import-captions-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Notificar fallo por email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          secure: true
          subject: 'YT‚ÜíSupabase: Workflow FAILED üò±'
          from: jvillarreal0991@gmail.com
          to: ${{ secrets.ALERT_EMAIL }}
          body: |
            Ha fallado el job ${{ github.job }} en el run ${{ github.run_id }}.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # =====================================================================================
  # PASO 3: IMPORTAR COMENTARIOS
  # =====================================================================================
  import_recent_comments:
    name: "PASO 3: Importar Comentarios (00:20 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'import_recent_comments')) ||
      (github.event_name == 'schedule' && github.event.schedule == '20 5 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que import_captions termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: import-captions-${{ steps.slot.outputs.SLOT }}-10 5 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de import_captions para ${{ steps.slot.outputs.SLOT }}. Se omite import_recent_comments para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/import_recent_comments
          key: import-recent-comments-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "import_recent_comments ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          MAX_VIDEOS_PER_RUN: 50
          MAX_COMMENTS_PER_VIDEO: 500
        run: python ${{ steps.pydir.outputs.PYDIR }}/import_recent_comments.py
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/import_recent_comments
          key: import-recent-comments-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}

  # =====================================================================================
  # PASO 4: DETECTAR OBJETOS EN THUMBNAILS
  # =====================================================================================
  detect_thumbnail_objects:
    name: "PASO 4: Detectar Objetos en Thumbnails (00:30 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'detect_thumbnail_objects')) ||
      (github.event_name == 'schedule' && github.event.schedule == '30 5 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que import_recent_comments termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: import-recent-comments-${{ steps.slot.outputs.SLOT }}-20 5 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de import_recent_comments para ${{ steps.slot.outputs.SLOT }}. Se omite detect_thumbnail_objects para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/detect_thumbnail_objects
          key: detect-thumbnail-objects-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "detect_thumbnail_objects ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && vars.THUMB_OBJECTS_ENABLED == 'true' }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: python ${{ steps.pydir.outputs.PYDIR }}/detect_thumbnail_objects.py
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/detect_thumbnail_objects
          key: detect-thumbnail-objects-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}

  # =====================================================================================
  # PASO 5: EXTRAER TEXTO DE THUMBNAILS
  # =====================================================================================
  extract_thumbnail_text:
    name: "PASO 5: Extraer Texto de Thumbnails (00:40 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'extract_thumbnail_text')) ||
      (github.event_name == 'schedule' && github.event.schedule == '40 5 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que detect_thumbnail_objects termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: detect-thumbnail-objects-${{ steps.slot.outputs.SLOT }}-30 5 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de detect_thumbnail_objects para ${{ steps.slot.outputs.SLOT }}. Se omite extract_thumbnail_text para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/extract_thumbnail_text
          key: extract-thumbnail-text-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "extract_thumbnail_text ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && vars.THUMB_OCR_ENABLED == 'true' }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: python ${{ steps.pydir.outputs.PYDIR }}/extract_thumbnail_text.py
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/extract_thumbnail_text
          key: extract-thumbnail-text-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}

  # =====================================================================================
  # PASO 6: CONVERTIR SUBT√çTULOS A GUION
  # =====================================================================================
  convert_captions_to_script:
    name: "PASO 6: Convertir Subt√≠tulos a Guion (00:50 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'convert_captions_to_script')) ||
      (github.event_name == 'schedule' && github.event.schedule == '50 5 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que extract_thumbnail_text termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: extract-thumbnail-text-${{ steps.slot.outputs.SLOT }}-40 5 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de extract_thumbnail_text para ${{ steps.slot.outputs.SLOT }}. Se omite convert_captions_to_script para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/convert_captions_to_script
          key: convert-captions-to-script-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "convert_captions_to_script ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: python ${{ steps.pydir.outputs.PYDIR }}/convert_captions_to_script.py
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/convert_captions_to_script
          key: convert-captions-to-script-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}

  # =====================================================================================
  # PASO 7: RECONCILIAR COMENTARIOS
  # =====================================================================================
  reconcile_comments:
    name: "PASO 7: Reconciliar Comentarios (01:00 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'reconcile_comments')) ||
      (github.event_name == 'schedule' && github.event.schedule == '0 6 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que convert_captions_to_script termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: convert-captions-to-script-${{ steps.slot.outputs.SLOT }}-50 5 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de convert_captions_to_script para ${{ steps.slot.outputs.SLOT }}. Se omite reconcile_comments para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/reconcile_comments
          key: reconcile-comments-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "reconcile_comments ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: python ${{ steps.pydir.outputs.PYDIR }}/reconcile_comments.py
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/reconcile_comments
          key: reconcile-comments-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}

  # =====================================================================================
  # PASO 8: ANALIZAR SENTIMIENTO DE COMENTARIOS
  # =====================================================================================
  fetch_comment_sentiment:
    name: "PASO 8: Analizar Sentimiento (01:10 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'fetch_comment_sentiment')) ||
      (github.event_name == 'schedule' && github.event.schedule == '10 6 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que reconcile_comments termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: reconcile-comments-${{ steps.slot.outputs.SLOT }}-0 6 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de reconcile_comments para ${{ steps.slot.outputs.SLOT }}. Se omite fetch_comment_sentiment para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/fetch_comment_sentiment
          key: fetch-comment-sentiment-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "fetch_comment_sentiment ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: python ${{ steps.pydir.outputs.PYDIR }}/fetch_comment_sentiment.py
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/fetch_comment_sentiment
          key: fetch-comment-sentiment-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}

  # =====================================================================================
  # PASO 9: CONSTRUIR PERFIL DEL CANAL (AUTO-NICHO)
  # =====================================================================================
  build_niche_profile:
    name: "PASO 9: Auto-Nicho / Construir Perfil (01:20 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'build_niche_profile')) ||
      (github.event_name == 'schedule' && github.event.schedule == '20 6 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Cache models
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/torch
            ~/.cache/huggingface
            ~/.cache/sentence-transformers
          key: ${{ runner.os }}-model-cache-${{ hashFiles('requirements.txt') }}-v2
      - name: Instalar dependencias (incluyendo ML)
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que fetch_comment_sentiment termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: fetch-comment-sentiment-${{ steps.slot.outputs.SLOT }}-10 6 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de fetch_comment_sentiment para ${{ steps.slot.outputs.SLOT }}. Se omite build_niche_profile para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/build_niche_profile
          key: build-niche-profile-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "build_niche_profile ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          NICHES_TOP_N_VIDEOS: 150
        run: python ${{ steps.pydir.outputs.PYDIR }}/build_niche_profile.py
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/build_niche_profile
          key: build-niche-profile-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}

  # =====================================================================================
  # PASO 10: ESCANEAR COMPETENCIA (AUTO-NICHO)
  # =====================================================================================
  scan_competencia_auto_nicho:
    name: "PASO 10: Auto-Nicho / Escanear Competencia (01:30 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'scan_competencia_auto_nicho')) ||
      (github.event_name == 'schedule' && github.event.schedule == '30 6 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: requirements.txt
      - name: Cache models
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/torch
            ~/.cache/huggingface
            ~/.cache/sentence-transformers
          key: ${{ runner.os }}-model-cache-${{ hashFiles('requirements.txt') }}-v2
      - name: Instalar dependencias y forzar isodate
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          echo "Forzando la reinstalaci√≥n de isodate para evitar problemas de cach√©..."
          python -m pip install --upgrade --force-reinstall "isodate>=0.6.1"
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que build_niche_profile termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: build-niche-profile-${{ steps.slot.outputs.SLOT }}-20 6 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de build_niche_profile para ${{ steps.slot.outputs.SLOT }}. Se omite scan_competencia_auto_nicho para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/scan_competencia_auto_nicho
          key: scan-competencia-auto-nicho-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "scan_competencia_auto_nicho ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          AUTO_NICHO_SHADOW: ${{ vars.AUTO_NICHO_SHADOW || 'true' }}
          TH_SHORTS: ${{ vars.TH_SHORTS || 0.65 }}
          TH_LONGS: ${{ vars.TH_LONGS || 0.70 }}
          TH_MIN: ${{ vars.TH_MIN || 0.58 }}
          TARGET_SHORTS: ${{ vars.TARGET_SHORTS || 15 }}
          TARGET_LONGS: ${{ vars.TARGET_LONGS || 10 }}
        run: python ${{ steps.pydir.outputs.PYDIR }}/scan_competencia_auto_nicho.py
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/scan_competencia_auto_nicho
          key: scan-competencia-auto-nicho-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}

  # =====================================================================================
  # PASO 11: MANTENER M√âTRICAS
  # =====================================================================================
  maint_metrics:
    name: "PASO 11: Mantener M√©tricas (01:40 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'maint_metrics')) ||
      (github.event_name == 'schedule' && github.event.schedule == '40 6 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que scan_competencia_auto_nicho termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: scan-competencia-auto-nicho-${{ steps.slot.outputs.SLOT }}-30 6 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de scan_competencia_auto_nicho para ${{ steps.slot.outputs.SLOT }}. Se omite maint_metrics para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/maint_metrics
          key: maint-metrics-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "maint_metrics ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        uses: nick-invision/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: |
            set -euo pipefail
            export SUPABASE_URL="$(printf '%s' "$SUPABASE_URL_RAW" | tr -d '\r\n ' | sed 's:/*$::')"
            export SUPABASE_SERVICE_KEY="$(printf '%s' "$SUPABASE_SERVICE_KEY_RAW" | tr -d '\r\n ')"
            python ${{ steps.pydir.outputs.PYDIR }}/maint_metrics.py
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          SUPABASE_URL_RAW: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_RAW: ${{ secrets.SUPABASE_SERVICE_KEY }}
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/maint_metrics
          key: maint-metrics-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Notificar fallo por email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          secure: true
          subject: 'YT‚ÜíSupabase: Workflow FAILED üò±'
          from: jvillarreal0991@gmail.com
          to: ${{ secrets.ALERT_EMAIL }}
          body: |
            Ha fallado el job ${{ github.job }} en el run ${{ github.run_id }}.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # =====================================================================================
  # PASO 12: OBTENER ANAL√çTICAS DE VIDEOS
  # =====================================================================================
  fetch_video_analytics:
    name: "PASO 12: Obtener Anal√≠ticas (01:50 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'fetch_video_analytics')) ||
      (github.event_name == 'schedule' && github.event.schedule == '50 6 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que maint_metrics termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: maint-metrics-${{ steps.slot.outputs.SLOT }}-40 6 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de maint_metrics para ${{ steps.slot.outputs.SLOT }}. Se omite fetch_video_analytics para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/fetch_video_analytics
          key: fetch-video-analytics-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "fetch_video_analytics ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        uses: nick-invision/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: |
            set -euo pipefail
            export SUPABASE_URL="$(printf '%s' "$SUPABASE_URL_RAW" | tr -d '\r\n ' | sed 's:/*$::')"
            export SUPABASE_SERVICE_KEY="$(printf '%s' "$SUPABASE_SERVICE_KEY_RAW" | tr -d '\r\n ')"
            python ${{ steps.pydir.outputs.PYDIR }}/fetch_video_analytics.py
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          SUPABASE_URL_RAW: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_RAW: ${{ secrets.SUPABASE_SERVICE_KEY }}
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/fetch_video_analytics
          key: fetch-video-analytics-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Notificar fallo por email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          secure: true
          subject: 'YT‚ÜíSupabase: Workflow FAILED üò±'
          from: jvillarreal0991@gmail.com
          to: ${{ secrets.ALERT_EMAIL }}
          body: |
            Ha fallado el job ${{ github.job }} en el run ${{ github.run_id }}.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # =====================================================================================
  # PASO 13: CALCULAR HORARIO DE PUBLICACI√ìN
  # =====================================================================================
  compute_posting_schedule:
    name: "PASO 13: Calcular Horario de Publicaci√≥n (02:00 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'compute_posting_schedule')) ||
      (github.event_name == 'schedule' && github.event.schedule == '0 7 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que fetch_video_analytics termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: fetch-video-analytics-${{ steps.slot.outputs.SLOT }}-50 6 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de fetch_video_analytics para ${{ steps.slot.outputs.SLOT }}. Se omite compute_posting_schedule para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/compute_posting_schedule
          key: compute-posting-schedule-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "compute_posting_schedule ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        uses: nick-invision/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: |
            set -euo pipefail
            export SUPABASE_URL="$(printf '%s' "$SUPABASE_URL_RAW" | tr -d '\r\n ' | sed 's:/*$::')"
            export SUPABASE_SERVICE_KEY="$(printf '%s' "$SUPABASE_SERVICE_KEY_RAW" | tr -d '\r\n ')"
            python ${{ steps.pydir.outputs.PYDIR }}/compute_posting_schedule.py
        env:
          SUPABASE_URL_RAW: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_RAW: ${{ secrets.SUPABASE_SERVICE_KEY }}
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/compute_posting_schedule
          key: compute-posting-schedule-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Notificar fallo por email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          secure: true
          subject: 'YT‚ÜíSupabase: Workflow FAILED üò±'
          from: jvillarreal0991@gmail.com
          to: ${{ secrets.ALERT_EMAIL }}
          body: |
            Ha fallado el job ${{ github.job }} en el run ${{ github.run_id }}.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # =====================================================================================
  # PASO 14: OBTENER M√âTRICAS DE MONETIZACI√ìN
  # =====================================================================================
  fetch_monetization_metrics:
    name: "PASO 14: Obtener M√©tricas de Monetizaci√≥n (02:10 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'fetch_monetization_metrics')) ||
      (github.event_name == 'schedule' && github.event.schedule == '10 7 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que compute_posting_schedule termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: compute-posting-schedule-${{ steps.slot.outputs.SLOT }}-0 7 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de compute_posting_schedule para ${{ steps.slot.outputs.SLOT }}. Se omite fetch_monetization_metrics para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/fetch_monetization_metrics
          key: fetch-monetization-metrics-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "fetch_monetization_metrics ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        uses: nick-invision/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: |
            set -euo pipefail
            export SUPABASE_URL="$(printf '%s' "$SUPABASE_URL_RAW" | tr -d '\r\n ' | sed 's:/*$::')"
            export SUPABASE_SERVICE_KEY="$(printf '%s' "$SUPABASE_SERVICE_KEY_RAW" | tr -d '\r\n ')"
            python ${{ steps.pydir.outputs.PYDIR }}/fetch_monetization_metrics.py
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          SUPABASE_URL_RAW: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_RAW: ${{ secrets.SUPABASE_SERVICE_KEY }}
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/fetch_monetization_metrics
          key: fetch-monetization-metrics-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Notificar fallo por email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          secure: true
          subject: 'YT‚ÜíSupabase: Workflow FAILED üò±'
          from: jvillarreal0991@gmail.com
          to: ${{ secrets.ALERT_EMAIL }}
          body: |
            Ha fallado el job ${{ github.job }} en el run ${{ github.run_id }}.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # =====================================================================================
  # PASO 15: OBTENER VIDEOS EN TENDENCIA
  # =====================================================================================
  fetch_trending_videos:
    name: "PASO 15: Obtener Videos en Tendencia (02:20 Lima)"
    runs-on: ubuntu-latest
    continue-on-error: true
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'fetch_trending_videos')) ||
      (github.event_name == 'schedule' && github.event.schedule == '20 7 * * *')
    env:
      REGION_CODES: "PE,MX,AR,CO,CL,ES,US,GB,IN,BR,PT"
      ALLOWED_LANGS: "es,en,hi,pt"
      LONG_MIN_SECONDS: 180
      MAX_SHORTS_PER_DAY: 20
      MAX_LONGS_PER_DAY: 15
      PAGES_PER_REGION: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que fetch_monetization_metrics termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: fetch-monetization-metrics-${{ steps.slot.outputs.SLOT }}-10 7 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de fetch_monetization_metrics para ${{ steps.slot.outputs.SLOT }}. Se omite fetch_trending_videos para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/fetch_trending_videos
          key: fetch-trending-videos-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "fetch_trending_videos ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        uses: nick-invision/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 20
          command: |
            set -euo pipefail
            export SUPABASE_URL="$(printf '%s' "$SUPABASE_URL_RAW" | tr -d '\r\n ' | sed 's:/*$::')"
            export SUPABASE_SERVICE_KEY="$(printf '%s' "$SUPABASE_SERVICE_KEY_RAW" | tr -d '\r\n ')"
            python ${{ steps.pydir.outputs.PYDIR }}/fetch_trending_videos.py
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          SUPABASE_URL_RAW: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_RAW: ${{ secrets.SUPABASE_SERVICE_KEY }}
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/fetch_trending_videos
          key: fetch-trending-videos-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Subir artefacto de reporte
        if: ${{ steps.cache.outputs.cache-hit != 'true' && success() }}
        uses: actions/upload-artifact@v4
        with:
          name: trending-report
          path: ./trending_report_*.md
      - name: Notificar fallo por email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          secure: true
          subject: 'YT‚ÜíSupabase: Workflow FAILED üò±'
          from: jvillarreal0991@gmail.com
          to: ${{ secrets.ALERT_EMAIL }}
          body: |
            Ha fallado el job ${{ github.job }} en el run ${{ github.run_id }}.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # =====================================================================================
  # PASO 16: OBTENER TENDENCIAS DE B√öSQUEDA
  # =====================================================================================
  fetch_search_trends:
    name: "PASO 16: Obtener Tendencias de B√∫squeda (02:30 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == 'fetch_search_trends' || inputs.only == '')) ||
      (github.event_name == 'schedule' && github.event.schedule == '30 7 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Instalar pytrends
        run: pip install pytrends
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que fetch_trending_videos termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: fetch-trending-videos-${{ steps.slot.outputs.SLOT }}-20 7 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de fetch_trending_videos para ${{ steps.slot.outputs.SLOT }}. Se omite fetch_search_trends para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/fetch_search_trends
          key: fetch-search-trends-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "fetch_search_trends ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        uses: nick-invision/retry@v3
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: |
            set -euo pipefail
            export SUPABASE_URL="$(printf '%s' "$SUPABASE_URL_RAW" | tr -d '\r\n ' | sed 's:/*$::')"
            export SUPABASE_SERVICE_KEY="$(printf '%s' "$SUPABASE_SERVICE_KEY_RAW" | tr -d '\r\n ')"
            python ${{ steps.pydir.outputs.PYDIR }}/fetch_search_trends.py
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
          SUPABASE_URL_RAW: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_RAW: ${{ secrets.SUPABASE_SERVICE_KEY }}
          CHANNEL_NAME: ${{ secrets.CHANNEL_NAME }}
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/fetch_search_trends
          key: fetch-search-trends-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Notificar fallo por email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          secure: true
          subject: 'YT‚ÜíSupabase: Workflow FAILED üò±'
          from: jvillarreal0991@gmail.com
          to: ${{ secrets.ALERT_EMAIL }}
          body: |
            Ha fallado el job ${{ github.job }} en el run ${{ github.run_id }}.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # =====================================================================================
  # PASO 17: PURGAR BUFFER
  # =====================================================================================
  purge_buffer:
    name: "PASO 17: Purgar Buffer (02:40 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'purge_buffer')) ||
      (github.event_name == 'schedule' && github.event.schedule == '40 7 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que fetch_search_trends termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: fetch-search-trends-${{ steps.slot.outputs.SLOT }}-30 7 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de fetch_search_trends para ${{ steps.slot.outputs.SLOT }}. Se omite purge_buffer para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/purge_buffer
          key: purge-buffer-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "purge_buffer ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: python -u ${{ steps.pydir.outputs.PYDIR }}/purge_buffer.py
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/purge_buffer
          key: purge-buffer-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Notificar fallo por email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          secure: true
          subject: 'YT‚ÜíSupabase: Workflow FAILED üò±'
          from: jvillarreal0991@gmail.com
          to: ${{ secrets.ALERT_EMAIL }}
          body: |
            Ha fallado el job ${{ github.job }} en el run ${{ github.run_id }}.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # =====================================================================================
  # PASO 18: EXPORTAR SYNC WATERMARKS
  # =====================================================================================
  export_sync_watermarks:
    name: "PASO 18: Exportar Sync Watermarks (02:50 Lima)"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.only == '' || inputs.only == 'export_sync_watermarks')) ||
      (github.event_name == 'schedule' && github.event.schedule == '50 7 * * *')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          clean: true
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
      - name: Instalar dependencias de Python
        run: pip install -r requirements.txt
      - name: Detectar carpeta de scripts
        id: pydir
        run: |
          if [ -d scripts ]; then echo "PYDIR=scripts" >> $GITHUB_OUTPUT; else echo "PYDIR=." >> $GITHUB_OUTPUT; fi
      - name: SLOT (d√≠a Lima)
        id: slot
        run: echo "SLOT=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      - name: Comprobar que purge_buffer termin√≥ hoy (Lima)
        id: prev
        uses: actions/cache@v4
        with:
          path: .checkpoint/_prevcheck
          key: purge-buffer-${{ steps.slot.outputs.SLOT }}-40 7 * * *
      - name: Saltar porque el paso anterior no termin√≥ hoy
        if: ${{ steps.prev.outputs['cache-hit'] != 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: |
          echo "::warning::Falta checkpoint de purge_buffer para ${{ steps.slot.outputs.SLOT }}. Se omite export_sync_watermarks para respetar el orden."
          exit 0
      - name: Restore checkpoint
        id: cache
        uses: actions/cache@v4
        with:
          path: .checkpoint/export_sync_watermarks
          key: export-sync-watermarks-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
      - name: Skip (ya corrido este slot hoy)
        if: ${{ steps.cache.outputs['cache-hit'] == 'true' && !(github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        run: echo "export_sync_watermarks ya completado hoy para este slot. Skip."
      - name: Run
        if: ${{ steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true') }}
        env:
          SUPABASE_URL_RAW: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_RAW: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          set -euo pipefail
          export SUPABASE_URL="$(printf '%s' "$SUPABASE_URL_RAW" | tr -d '\r\n ' | sed 's:/*$::')"
          export SUPABASE_SERVICE_KEY="$(printf '%s' "$SUPABASE_SERVICE_KEY_RAW" | tr -d '\r\n ')"
          python ${{ steps.pydir.outputs.PYDIR }}/export_sync_watermarks.py
      - name: Save checkpoint
        if: ${{ (steps.cache.outputs['cache-hit'] != 'true' || (github.event_name == 'workflow_dispatch' && inputs.force == 'true')) && !(github.event_name == 'workflow_dispatch' && inputs.persist_checkpoint == 'false') }}
        uses: actions/cache/save@v4
        with:
          path: .checkpoint/export_sync_watermarks
          key: export-sync-watermarks-${{ steps.slot.outputs.SLOT }}-${{ github.event.schedule || 'manual' }}
